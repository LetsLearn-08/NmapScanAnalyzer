"""
XML Parser Module
Parses Nmap XML scan results and extracts host information.
"""

import xml.etree.ElementTree as ET
from typing import List, Dict, Any


class NmapParser:
    """
    Parser for Nmap XML scan files.
    
    This class handles reading and parsing XML files generated by Nmap,
    extracting information about scanned hosts, their status, open ports,
    and running services.
    """
    
    def __init__(self, xml_file: str):
        """
        Initialize the parser with an XML file.
        
        Args:
            xml_file (str): Path to the Nmap XML scan file
        """
        self.xml_file = xml_file
        self.tree = None
        self.root = None
        
    def parse(self) -> List[Dict[str, Any]]:
        """
        Parse the XML file and extract host information.
        
        Returns:
            List[Dict]: A list of dictionaries containing host information
            
        Raises:
            FileNotFoundError: If the XML file doesn't exist
            ET.ParseError: If the XML file is malformed
        """
        try:
            # Parse the XML file
            self.tree = ET.parse(self.xml_file)
            self.root = self.tree.getroot()
            
            # Extract all hosts from the scan
            hosts = []
            for host in self.root.findall('host'):
                host_data = self._parse_host(host)
                if host_data:
                    hosts.append(host_data)
                    
            return hosts
            
        except FileNotFoundError:
            raise FileNotFoundError(f"XML file not found: {self.xml_file}")
        except ET.ParseError as e:
            raise ET.ParseError(f"Error parsing XML file: {e}")
    
    def _parse_host(self, host_element) -> Dict[str, Any]:
        """
        Parse a single host element from the XML.
        
        Args:
            host_element: XML element representing a host
            
        Returns:
            Dict: Dictionary containing host information
        """
        # Get host status (up or down)
        status_elem = host_element.find('status')
        status = status_elem.get('state') if status_elem is not None else 'unknown'
        
        # Get IP address
        address_elem = host_element.find('address')
        ip_address = address_elem.get('addr') if address_elem is not None else 'Unknown'
        
        # Get hostname if available
        hostname = 'N/A'
        hostnames_elem = host_element.find('hostnames')
        if hostnames_elem is not None:
            hostname_elem = hostnames_elem.find('hostname')
            if hostname_elem is not None:
                hostname = hostname_elem.get('name', 'N/A')
        
        # Parse open ports and services
        ports = self._parse_ports(host_element)
        
        return {
            'ip': ip_address,
            'hostname': hostname,
            'status': status,
            'ports': ports
        }
    
    def _parse_ports(self, host_element) -> List[Dict[str, Any]]:
        """
        Parse port information for a host.
        
        Args:
            host_element: XML element representing a host
            
        Returns:
            List[Dict]: List of dictionaries containing port information
        """
        ports = []
        
        # Find the ports element
        ports_elem = host_element.find('ports')
        if ports_elem is None:
            return ports
        
        # Iterate through all port elements
        for port in ports_elem.findall('port'):
            # Get port number and protocol
            port_id = port.get('portid', 'Unknown')
            protocol = port.get('protocol', 'tcp')
            
            # Get port state
            state_elem = port.find('state')
            state = state_elem.get('state') if state_elem is not None else 'unknown'
            
            # Only include open ports
            if state == 'open':
                # Get service information
                service_elem = port.find('service')
                service_name = 'unknown'
                product = 'N/A'
                version = 'N/A'
                
                if service_elem is not None:
                    service_name = service_elem.get('name', 'unknown')
                    product = service_elem.get('product', 'N/A')
                    version = service_elem.get('version', 'N/A')
                
                ports.append({
                    'port': port_id,
                    'protocol': protocol,
                    'state': state,
                    'service': service_name,
                    'product': product,
                    'version': version
                })
        
        return ports
    
    def get_scan_info(self) -> Dict[str, str]:
        """
        Get general information about the scan.
        
        Returns:
            Dict: Dictionary containing scan metadata
        """
        if self.root is None:
            return {}
        
        # Get scan information
        nmaprun = self.root
        scan_info = {
            'scanner': nmaprun.get('scanner', 'nmap'),
            'version': nmaprun.get('version', 'unknown'),
            'start_time': nmaprun.get('startstr', 'unknown'),
            'command': nmaprun.get('args', 'unknown')
        }
        
        return scan_info
